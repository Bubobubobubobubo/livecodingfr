import{s as U,e as E,n as O}from"./scheduler.aZRR5A_O.js";import{S as X,i as Y,g as n,s as m,h as u,c as p,x as b,j as Z,f as t,k as c,l as r,a}from"./index.uMghMl4_.js";function $(K){let s,A,x,w,q,d,F="Présentation",S,f,G=`Iain Duncan est l’auteur de deux utilitaires, <a href="https://github.com/iainctduncan/scheme-for-max" rel="nofollow">Scheme for Max</a> et <a href="https://github.com/iainctduncan/scheme-for-pd" rel="nofollow">Scheme for Pure
Data</a>. Ces deux outils font
sensiblement la même chose, à différents niveaux d’avancement. Ils intègrent un
interpréteur pour le langage <a href="https://ccrma.stanford.edu/software/snd/snd/s7.html" rel="nofollow">S7 Scheme</a> (publié par Bill Schottstaedt au <a href="https://ccrma.stanford.edu/" rel="nofollow">CCRMA</a>) et permettent de contrôler plus ou moins finement Max ou Pure Data directement depuis LISP. Vous pouvez programmer vos propres séquenceurs, manipuler des données, générer des tableaux et des <em>buffers</em> etc. S7 est un dialecte de Scheme/LISP qui a été conçu pour être facilement intégré dans différentes applications. C’est un langage léger et facile à porter un peu partout. Il a initialement été développé par un musicien pour des musiciens. Il existe une longue tradition dans les milieux créatifs qui consiste à présenter les langages de la famille LISP comme particulièrement adaptés au travail en musique. Il suffit de regarder des outils comme <a href="https://opusmodus.com/forums/live-coding-instrument/" rel="nofollow">OpusModus</a>, <a href="https://extemporelang.github.io/" rel="nofollow">ExTempore</a>, <a href="https://github.com/overtone/overtone" rel="nofollow">Overtone</a>, <a href="https://incudine.sourceforge.net/" rel="nofollow">Incudine</a>, <a href="https://github.com/byulparan/cl-collider" rel="nofollow">cl-collider</a> ou encore <a href="https://www.ircam.fr/transmission/formations-professionnelles/openmusic" rel="nofollow">OpenMusic</a> pour s’en convaincre. Tous réinventent la même idée : faire de LISP un environnement de choix pour la composition électronique/algorithmique. L’utilisation de Scheme for Max et de Scheme for Pure Data s’adresse à des <em>live coders</em> expérimentés et qui maîtrisent déjà un petit peu la programmation et l’utilisation de Max/Pure Data. Il ne faut pas non plus être effrayé de l’aspect académique et un peu <em>nerd</em> de l’expérience. On fait beaucoup de programmation et de technique pour développer, <em>in fine</em>, des super pouvoirs et une maîtrise inégalée de l’environnement de composition.`,I,P,y,l,N,_,L,C,h,Q=`Iain Duncan est l’un des derniers musiciens frappés par le sortilège LISP et il a pris le
temps de publier <a href="https://iainctduncan.github.io/scheme-for-max-docs/s7.html#about-s7-and-s74-scheme" rel="nofollow">quelques</a> <a href="https://iainctduncan.github.io/scheme-for-max-docs/motivations.html" rel="nofollow">documents</a> qui détaillent les avantages de LISP pour le travail en musique. Ces outils s’adressent à un public qui aime expérimenter et qui préfère développer de petites librairies/fonctions réutilisables entre différents <em>patchs</em> plutôt que de tout sacrifier pour apprendre l’utilisation d’un <em>framework</em> ou d’un outil/usine à gaz. La documentation est très bien faite et cela vaut le coup de tout lire ne serait-ce que pour s’en imprégner. Même si le fait d’apprendre LISP peut engendrer des réticences plus ou moins justifiées, faire un petit <em>patch</em> pour essayer n’a jamais tué personne. Contrairement à d’autres familles de langages, LISP, il est vrai, à l’air <em>naturellement</em> et presque par accident adapté à la pratique du <em>live coding</em>.`,M,B,D,g,V="Conclusion",R,k,T,o,W,j,z,H,v,J="Quelle conclusion tirer de tout cela ? Aucune idée. Parler des langages LISP comme d’un outil ou d’une expérience magique est un poncif un peu usant à la longue. Si les langages LISPs étaient vraiment nécessaires et adaptés, pourquoi ne sont-ils pas utilisé partout et tout le temps ? Il semble que le vent ait juste tourné et que les langages LISP se soient retrouvés dans une niche qu’ils n’arrivent désormais plus vraiment à quitter. Les langages LISP restent présents un peu partout en informatique musicale, surtout dans les coulisses, et ressurgissent périodiquement pour nous rappeler à quel point ils sont élégants, adaptés et efficaces. Essayez Scheme for Pure Data et faites vous une idée par vous-même.";return{c(){s=n("img"),x=m(),w=n("br"),q=m(),d=n("h2"),d.textContent=F,S=m(),f=n("p"),f.innerHTML=G,I=m(),P=n("br"),y=m(),l=n("iframe"),_=m(),L=n("br"),C=m(),h=n("p"),h.innerHTML=Q,M=m(),B=n("br"),D=m(),g=n("h2"),g.textContent=V,R=m(),k=n("br"),T=m(),o=n("img"),j=m(),z=n("br"),H=m(),v=n("p"),v.textContent=J,this.h()},l(e){s=u(e,"IMG",{src:!0,alt:!0,style:!0,loading:!0}),x=p(e),w=u(e,"BR",{}),q=p(e),d=u(e,"H2",{"data-svelte-h":!0}),b(d)!=="svelte-1v4p4uu"&&(d.textContent=F),S=p(e),f=u(e,"P",{"data-svelte-h":!0}),b(f)!=="svelte-1t86df7"&&(f.innerHTML=G),I=p(e),P=u(e,"BR",{}),y=p(e),l=u(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0,style:!0}),Z(l).forEach(t),_=p(e),L=u(e,"BR",{}),C=p(e),h=u(e,"P",{"data-svelte-h":!0}),b(h)!=="svelte-czrwfr"&&(h.innerHTML=Q),M=p(e),B=u(e,"BR",{}),D=p(e),g=u(e,"H2",{"data-svelte-h":!0}),b(g)!=="svelte-grw4hp"&&(g.textContent=V),R=p(e),k=u(e,"BR",{}),T=p(e),o=u(e,"IMG",{src:!0,alt:!0,style:!0,loading:!0}),j=p(e),z=u(e,"BR",{}),H=p(e),v=u(e,"P",{"data-svelte-h":!0}),b(v)!=="svelte-1df9fw3"&&(v.textContent=J),this.h()},h(){E(s.src,A="https://repository-images.githubusercontent.com/232438669/2786d100-7d94-11ea-81b9-74d9e19db04a")||c(s,"src",A),c(s,"alt","Biset Blank"),r(s,"display","block"),r(s,"margin-left","auto"),r(s,"margin-right","auto"),r(s,"max-width","500px"),r(s,"width","75%"),c(s,"loading","lazy"),c(l,"width","800"),c(l,"height","600"),E(l.src,N="https://www.youtube.com/embed/rcLWTjN4qBI")||c(l,"src",N),c(l,"title","Stochastic Study #1 for Scheme for Max and modular synthesizer, Iain C.T. Duncan (2021)"),c(l,"frameborder","0"),c(l,"allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"),l.allowFullscreen=!0,r(l,"display","block"),r(l,"margin-left","auto"),r(l,"margin-right","auto"),r(l,"max-width","800px"),r(l,"width","75%"),E(o.src,W="https://imgs.xkcd.com/comics/lisp_cycles.png")||c(o,"src",W),c(o,"alt","Biset Blank"),r(o,"display","block"),r(o,"margin-left","auto"),r(o,"margin-right","auto"),r(o,"max-width","800px"),r(o,"width","75%"),c(o,"loading","lazy")},m(e,i){a(e,s,i),a(e,x,i),a(e,w,i),a(e,q,i),a(e,d,i),a(e,S,i),a(e,f,i),a(e,I,i),a(e,P,i),a(e,y,i),a(e,l,i),a(e,_,i),a(e,L,i),a(e,C,i),a(e,h,i),a(e,M,i),a(e,B,i),a(e,D,i),a(e,g,i),a(e,R,i),a(e,k,i),a(e,T,i),a(e,o,i),a(e,j,i),a(e,z,i),a(e,H,i),a(e,v,i)},p:O,i:O,o:O,d(e){e&&(t(s),t(x),t(w),t(q),t(d),t(S),t(f),t(I),t(P),t(y),t(l),t(_),t(L),t(C),t(h),t(M),t(B),t(D),t(g),t(R),t(k),t(T),t(o),t(j),t(z),t(H),t(v))}}}const ie={title:"Scheme for Max/Pure Data : LISP encore et toujours",author:"Raphaël Maurice Forment",date:"2024-02-11"};class ae extends X{constructor(s){super(),Y(this,s,null,$,U,{})}}export{ae as default,ie as metadata};
